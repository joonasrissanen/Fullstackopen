[{"/home/joonas/workspace/Fullstackopen/part9/patientor/src/index.tsx":"1","/home/joonas/workspace/Fullstackopen/part9/patientor/src/App.tsx":"2","/home/joonas/workspace/Fullstackopen/part9/patientor/src/state/index.ts":"3","/home/joonas/workspace/Fullstackopen/part9/patientor/src/constants.ts":"4","/home/joonas/workspace/Fullstackopen/part9/patientor/src/state/reducer.ts":"5","/home/joonas/workspace/Fullstackopen/part9/patientor/src/state/state.tsx":"6","/home/joonas/workspace/Fullstackopen/part9/patientor/src/PatientListPage/index.tsx":"7","/home/joonas/workspace/Fullstackopen/part9/patientor/src/components/HealthRatingBar.tsx":"8","/home/joonas/workspace/Fullstackopen/part9/patientor/src/AddPatientModal/index.tsx":"9","/home/joonas/workspace/Fullstackopen/part9/patientor/src/AddPatientModal/AddPatientForm.tsx":"10","/home/joonas/workspace/Fullstackopen/part9/patientor/src/types.ts":"11","/home/joonas/workspace/Fullstackopen/part9/patientor/src/AddPatientModal/FormField.tsx":"12"},{"size":302,"mtime":1609944573304,"results":"13","hashOfConfig":"14"},{"size":1358,"mtime":1609946296757,"results":"15","hashOfConfig":"14"},{"size":52,"mtime":1609944573304,"results":"16","hashOfConfig":"14"},{"size":55,"mtime":1609944573300,"results":"17","hashOfConfig":"14"},{"size":790,"mtime":1609944573304,"results":"18","hashOfConfig":"14"},{"size":837,"mtime":1609944573304,"results":"19","hashOfConfig":"14"},{"size":2413,"mtime":1609946244573,"results":"20","hashOfConfig":"14"},{"size":630,"mtime":1609944573300,"results":"21","hashOfConfig":"14"},{"size":713,"mtime":1609944573300,"results":"22","hashOfConfig":"14"},{"size":3009,"mtime":1609944573300,"results":"23","hashOfConfig":"14"},{"size":301,"mtime":1609944573304,"results":"24","hashOfConfig":"14"},{"size":2585,"mtime":1609944573300,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"jn1i5j",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"/home/joonas/workspace/Fullstackopen/part9/patientor/src/index.tsx",[],[],"/home/joonas/workspace/Fullstackopen/part9/patientor/src/App.tsx",[],"/home/joonas/workspace/Fullstackopen/part9/patientor/src/state/index.ts",[],"/home/joonas/workspace/Fullstackopen/part9/patientor/src/constants.ts",[],"/home/joonas/workspace/Fullstackopen/part9/patientor/src/state/reducer.ts",[],"/home/joonas/workspace/Fullstackopen/part9/patientor/src/state/state.tsx",["56"],"import React, { createContext, useContext, useReducer } from \"react\";\nimport { Patient } from \"../types\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient };\n};\n\nconst initialState: State = {\n  patients: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","/home/joonas/workspace/Fullstackopen/part9/patientor/src/PatientListPage/index.tsx",[],"/home/joonas/workspace/Fullstackopen/part9/patientor/src/components/HealthRatingBar.tsx",["57"],"import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","/home/joonas/workspace/Fullstackopen/part9/patientor/src/AddPatientModal/index.tsx",["58"],"import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","/home/joonas/workspace/Fullstackopen/part9/patientor/src/AddPatientModal/AddPatientForm.tsx",[],"/home/joonas/workspace/Fullstackopen/part9/patientor/src/types.ts",[],"/home/joonas/workspace/Fullstackopen/part9/patientor/src/AddPatientModal/FormField.tsx",["59"],"import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n",[],{"ruleId":"60","severity":1,"message":"61","line":35,"column":30,"nodeType":"62","messageId":"63","endLine":35,"endColumn":35},{"ruleId":"60","severity":1,"message":"61","line":16,"column":25,"nodeType":"62","messageId":"63","endLine":16,"endColumn":60},{"ruleId":"60","severity":1,"message":"61","line":12,"column":25,"nodeType":"62","messageId":"63","endLine":12,"endColumn":76},{"ruleId":"60","severity":1,"message":"61","line":76,"column":35,"nodeType":"62","messageId":"63","endLine":84,"endColumn":6},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType"]